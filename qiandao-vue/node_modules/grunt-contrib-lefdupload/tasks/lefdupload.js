/*
 * grunt-lefdupload
 * http://git.letv.cn/uc-ued/grunt-contrib-lefdupload
 *
 * Copyright (c) 2016 liuluying@le.com
 * Licensed under the MIT license.
 */

'use strict';

var uploadMoudle = require('../lib/upload-moudle');

module.exports = function(grunt) {
    // Please see the Grunt documentation for more information regarding task
    // creation: http://gruntjs.com/creating-tasks


    grunt.registerMultiTask('lefdupload', 'upload file to cdn', function() {
        // Merge task-specific and/or target-specific options with these defaults.
        var options = this.options({
            router: false,
            remote: {
                folder: ''
            },
            //http request setting
            request:{}, 


        });
        var route =   [];
        var done = this.async();
        // Iterate over all specified file groups.
        var src = [],i = 0;
        this.files.forEach(function(file) {
            // Concat specified files.
            file.src.filter(function(filepath) {
                // Warn on and remove invalid source files (if nonull was set).
                if (!grunt.file.exists(filepath)) {
                    grunt.log.warn('Source file "' + filepath + '" not found.');
                    return false;
                } else {
                    return true;
                }
            }).map(function(filepath) {
                src.push(filepath);
            });

            // Print a success message.
        });
        uploadMoudle.setOptions(options);


        var router = function(opts,callback){
            
            var  content,newContent,reg = new RegExp(opts.startTag + "[\\w\\W]+" + opts.endTag,'mg');

            if(!grunt.file.exists(opts.file)) {
                grunt.fail.fatal('router  failed：' + opts.file + 'is not found');
                callback(true); 
                return  ;
            }
            
            content = grunt.file.read(opts.file).split(reg);
            if(content.length > 1) {
                content[0] += opts.startTag +'\n'+route.join(',') + '\n' + opts.endTag;
            }
            content =   content.join('');
            grunt.file.write(opts.file,content);
            grunt.task.run(opts.tasks)
            callback(false);
        }

        var go = function(i){
            if(!src[i]) {
                if(options.router) {
                    router(options.router,function(err,res){
                        done(!err);
                    });             
                } else {
                    done(true);
                }
                return;
            }
            uploadMoudle.uploadOneFile(options.remote.folder,src[i],function(err,url,file){
                if(!err) {
                    grunt.log.writeln('upload success：' + url);
                    route[route.length] = '"' + file +  '":"' + url + '"';
                } else {
                    grunt.fail.fatal('upload failed：' + err);
                }
                go(++i);
            });
        }
           
        go(i);
    });

};
